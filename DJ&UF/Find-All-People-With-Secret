class Solution:
    def find(self, node, parent):
        
        if parent[node] == node:
            return node
        
        parent[node] = self.find(parent[node], parent)
        return parent[node]

    def union(self, a, b, parent, size):
        root_a = self.find(a, parent)
        root_b = self.find(b, parent)

        if root_a == root_b:
            return

        if size[root_a] < size[root_b]:
            root_a,root_b = root_b, root_a

        parent[root_b] = parent[root_a]
        size[root_a] += size[root_b]
        
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        
        meetings.sort(key = lambda elt:elt[2])
        parent = [i for i in range(n)]
        size = [1 for i in range(n)]
        parent[firstPerson] = 0
        
        i = 0
        while  i< len(meetings):
            same_time = [meetings[i]]
            while i+1 < len(meetings) and meetings[i][2] == meetings[i+1][2]:
                same_time.append(meetings[i+1])
                i += 1
                
            for start, end , time in same_time:
                self.union(start, end, parent, size)
            
            secrate_root = self.find(0,parent)
            for start, end , time in same_time:
                if self.find(start,parent) == secrate_root:
                    continue
                parent[start] = start; parent[end] = end
                size[start] = 1; size[end] = 1
            i+=1
    
        ans = []
        for node in range(len(parent)):
            if self.find(node,parent) == self.find(0,parent):
                ans.append(node)
        return ans
